pipeline {
    agent any 
    stages {
    
        
            stage('mount dummyapp image') { 
                steps { 
                    sh 'ls -la'
                    sh 'rm cicd/docker/src/dummyapp -Rf'
                    sh 'cd cicd/docker/src && sudo chmod 777 init-repos.sh && ./init-repos.sh && ls -la'
                    sh 'if [ $(sudo docker ps -a -q | wc -l) -eq 0 ]; then echo "No containers running!"; else sudo docker stop $(sudo docker ps -a -q) && sudo docker rm $(sudo docker ps -a -q) ; fi'
                    sh 'cd cicd/docker && sudo docker-compose build  && sudo docker-compose up -d'
                }
            }
            stage('do unitests'){
            
                try { 
                    steps {
                        sh 'cd phpunit && composer update && phpunit'
                    }                    
                }catch(e){
                     throw e        
                }finally{
                    notifyBuild(currentBuild.result)
                }
            }      
            stage('send slack report message') {
                steps {
                    notifyBuild(currentBuild.result)
                }
            }
            

    }
}


def notifyBuild(String buildStatus = 'STARTED') {
 // build status of null means successful
 buildStatus =  buildStatus ?: 'SUCCESSFUL'

 // Default values
 def colorName = 'RED'
 def colorCode = '#FF0000 '
 def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' ${env.GIT_AUTHOR_EMAIL}"
 def summary = "${subject} (${env.BUILD_URL})"

 // Override default values based on build status
 if (buildStatus == 'STARTED') {
   color = 'YELLOW'
   colorCode = '#FFFF00 '
 } else if (buildStatus == 'SUCCESSFUL') {
   color = 'GREEN'
   colorCode = '#00FF00 '
 } else {
   color = 'RED'
   colorCode = '#FF0000 '
 }

 //slackSend channel: "@paulo.ferraz", message: "Build Started: ${env.JOB_NAME} ${env.BRANCH_NAME}
 
 // Send notifications
 slackSend (color: colorCode, message: summary)
}
